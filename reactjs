ch### React JS

React es una librería creada por Facebook, para crear las UI de las aplicaciones web basadas en componentes.

Características

* Los datos fluyen en un sentido desde el primer al último componente
* Usa un algoritmo para detectar cambios y solo aplicar esas modificaciones a la UI
* Utiliza JS para crear componentes pero para facilitar esto extendieron el lenguaje creando JSX
* Permite generar cualquier tipo de UI como web, mobile, canvas, televisores, terminales, etc.
* Propone usar programación funcional y manejar estructuras de datos inmutables.


## Hola Mundo




## ¿Que es y cómo funciona el Virtual DOM?

* El virtual DOM es una representación de todos los objetos que componen la UI usando un objeto de JS.
* Todos los componentes creados por React deben comenzar con mayúscula.
* El algoritmo de React permite que se hagan cambios de manera efectiva en el DOM.
* El algoritmo de diferencias de virtual DOM calcula las diferencias de lo que hay ahora y lo que va a venir luego.
* Los key son únicos por lista, si dentro de tu aplicación tenés dos listas estos pueden tener los mismos key sin problema, pero si dos elementos de la misma lista tienen el mismo key solo se va a renderizar el primero.
* Los key solo se usan en listas para identificar a cada elementos único de esa lista, fuera de una lista React los ignora.



## Introducción a JSX

* Es una extension de Javascript que nos permite utilizar HTML
* Para usar Babel desde el navegador, necesitas agregar un script, con la librería de babel-standalone y el tag donde escribimos el código debe ser tipo text/babel


## Creación de componentes

* Desarrollo Orientado a Componentes
* Separación de responsabilidades

* Maneras de Crear un componente en React

	- PureComponent : Funcion pura, es decir que no tiene efectos secundarios, no hace nada externo ni depende de algo externo solo de las props

			function Hola(props) {
				const name = props.name;

				// Creando elemento h en el DOM con JSX, sin utilizar React.DOM.h1({id: 'Title'}, `Hola ${name}`)
				return (
					<h1 id="Title">
						Hola {name}
					</h1>
				)
			}

	- Clases: React.Component me permite crear un componente utilizando clases y a diferencia de un componente creado con una funcion pura, se puede acceder a mas funcionaliades de React como por ejemplo el estado.

		- El metodo render() es el unico que es obligatorio en todo componente creado con clases
		- Cuando utilizamos clases los props se acceden directamente con this
		- hacer el super(props) es obligatorio siempre que utilizemos el metodo constructor
		- Un estado podemos actualizarlo utilizando una funcion llamada setState
		- metodo setState que podemos utilizar gracias a extender React.Component, me permite actualizar el estado o una key particular del estado
		- Cuando asignamos una funcion para que escuche eventos en un elemento nativo del DOM, el valor del this se pisa por el elemento, entonces no tenemos acceso al componente, para solucionar esto utilizamos

			this.handleClick = this.handleClick.bind(this)

			y asi pisamos la funcion handleClick con esa misma funcion pero cuyo this va a ser el componente
		- Siempre que hagamos un bind del this hay que hacerlo en el constructor por rendimiento y no asi

			render () {
				const name = this.props.name
				return (
					<h1 id="Title" onClick={this.handleClick.bind(this)}>
						Hola {name} {this.state.count}
					</h1>
				)
			}

	- PureComponent: Se diferencia de un componente que extiende React.component en que implementa un metodo para validar si los props y el estado cambiaron, y solamente hacer el render si cambiaron. Esto da una ventaja de rendimiento cuando tenemos un monton de componentes que pueden estar cambiando y asi evitar hacer render() inecesarios de los componentes, PERO,  tambien nos puede causar un problema; Si PureComponent, internamente, tiene otros elementos que tienen un estado interno como un componente que extiende a React.Component, pues cuando llegue a este componente y vea que nada cambio, simplemente no va a seguir renderizando la app esa parte. Por eso no es muy bueno utilizar siempre PureComponent, al no ser que estemos creando un componente  que este al final del arbol de componentes  (ultimo componente)

	- Creando un componente con estado por medio de una funcion que me crea la Clase, pero actualmente se recomienda no usarla ya que se va a eliminar de la libreria


			class MiComponent extends React.PureComponent { ... }

